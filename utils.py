try:
    from urllib.parse import urlparse
except ImportError:
    from urlparse import urlparse

from mongoengine import Document, QuerySet

from flask import jsonify

def json_response(d, code, success=None):
    def doc_parse(doc):
        return doc.to_mongo(use_db_field=False)

    def list_parse(l):
        for index, value in enumerate(l):
            l[index] = value_parse(value)
        return l

    def dict_parse(d):
        for key in d:
            d[key] = value_parse(d[key])
        return d

    def value_parse(v):
        if isinstance(v, dict):
            fn = dict_parse
        elif isinstance(v, list):
            fn = list_parse
        elif isinstance(v, QuerySet):
            fn = list_parse
        elif isinstance(v, Document):
            fn = doc_parse
        else:
            return v

        return fn(v)

    if success != None:
        d['success'] = success

    d = value_parse(d)

    return jsonify(d), code

def json_response_success(d, code):
    return json_response(d, code, success=True)

def json_response_error(d, code):
    return json_response(d, code, success=False)

def split_filter(s, separator):
    return filter(lambda x: x != '', s.split(separator))

def repo_to_vendor_device(repo):
    def is_new_format(repo):
        return len(split_filter(repo, '_')) > 3

    def is_old_Format(repo):
        return len(split_filter(repo, '-')) > 2

    def is_empty(repo):
        return len(repo) == 0

    if is_empty(repo):
        raise ValueError('Repo name cannot be empty.')

    if is_old_Format(repo):
        parts = split_filter(repo, '-')
        v = parts[0]
        d = parts[2]
    elif is_new_format(repo):
        parts = split_filter(repo, '_')
        v = parts[2]
        d = '_'.join(parts[3:])
    else:
        raise ValueError('Repo name has an invalid format.')

    return v, d

def is_valid_url(url):
    result = urlparse(url)
    parts = result.netloc.split('.')
    if result.scheme and len(parts) >= 2:
        return True
    else:
        return False
