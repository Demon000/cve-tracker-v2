import requests

try:
    from urllib.parse import urlparse, urljoin
except ImportError:
    from urlparse import urlparse, urljoin

from mongoengine import Document, QuerySet

from flask import jsonify, request, url_for

from furl import furl

from errors import *

def doc_parse(doc):
    d = doc.to_mongo(use_db_field=False)
    return dict_parse(d)

def list_parse(l):
    nl = []
    for value in l:
        nl.append(value_parse(value))
    return nl

def dict_parse(d):
    for key in d:
        d[key] = value_parse(d[key])
    return d

def value_parse(v):
    if isinstance(v, dict):
        fn = dict_parse
    elif isinstance(v, list):
        fn = list_parse
    elif isinstance(v, QuerySet):
        fn = list_parse
    elif isinstance(v, Document):
        fn = doc_parse
    else:
        return v

    return fn(v)

def json_response(d, code, success=None):
    if success != None:
        d['success'] = success

    d = value_parse(d)

    return jsonify(d), code

def json_response_success(d, code):
    return json_response(d, code, success=True)

def json_response_error(d, code):
    return json_response(d, code, success=False)

def split_filter(s, separator):
    return filter(lambda x: x != '', s.split(separator))

def repo_to_vendor_device(repo):
    def is_new_format(repo):
        return len(split_filter(repo, '_')) > 3

    def is_old_Format(repo):
        return len(split_filter(repo, '-')) > 2

    def is_empty(repo):
        return len(repo) == 0

    if is_empty(repo):
        raise ValidationError('Repo name cannot be empty.')

    if is_old_Format(repo):
        parts = split_filter(repo, '-')
        v = parts[0]
        d = parts[2]
    elif is_new_format(repo):
        parts = split_filter(repo, '_')
        v = parts[2]
        d = '_'.join(parts[3:])
    else:
        raise ValidationError('Repo name has an invalid format.')

    return v, d

def is_valid_url(url):
    result = urlparse(url)
    parts = result.netloc.split('.')
    if result.scheme and len(parts) >= 2:
        return True
    else:
        return False

def get_cve_score(name):
    score = 0

    if name[:3] == 'CVE':
        try:
            response = requests.get("https://cve.circl.lu/api/cve/{}" \
                    .format(name))
            response.raise_for_status()
            json = response.json()
            if json and 'cvss' in json:
                score = json['cvss']
        except (requests.exceptions.HTTPError, ValueError):
            pass
    else:
        score = 10

    return score

def is_own_url(target):
    own_url = furl(request.host_url)
    target_url = furl(target)
    return own_url.host == target_url.host

def get_redirect_back_url(route):
    target = request.referrer
    if is_own_url(target):
        return target

    return url_for(route)
