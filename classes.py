from operator import itemgetter

from mongoengine import *
from utils import *
from errors import *

StatusChoices = [1, 2, 3, 4, 5, 6]
StatusDescriptions = {
    1: 'unpatched',
    2: 'patched',
    3: 'unaffected',
    4: 'upstream hold',
    5: 'on gerrit',
    6: 'update available'
}
StatusValues = {
    'unpatched': 1,
    'patched': 2,
    'unaffected': 3,
    'upstream hold': 4,
    'on gerrit': 5,
    'update available': 6
}

BranchNames = ['cm-13.0', 'cm-14.1', 'lineage-15.0', 'lineage-15.1']
KernelVersions = ['3.4', '3.10', '3.18', '4.4', '4.9']

DeprecatedMap = {
    -1: [True, False],
    0: [False],
    1: [True]
}

def map_deprecated_values(v):
    if type(v) in [unicode, str]:
        try:
            deprecated = int(v)
        except ValidationError:
            deprecated = None
    else:
        deprecated = v

    if deprecated not in DeprecatedMap:
        deprecated = -1

    return DeprecatedMap[deprecated]

class Patchset(EmbeddedDocument):
    versions = ListField(StringField(choices=KernelVersions), required=True)
    patches = ListField(StringField(), required=True)

    @staticmethod
    def validate_version(version):
        if type(version) not in [unicode, str]:
            raise InvalidTypeError('Patchset version is not a string.')
        if version not in KernelVersions:
            raise ValidationError('Patchset version "{}" ' \
                    'is invalid.'.format(version))

    @staticmethod
    def validate_patch(patch):
        if type(patch) not in [unicode, str]:
            raise InvalidTypeError('Patchset patch is not a string.')
        if not is_valid_url(patch):
            raise ValidationError('Patchset patch "{}" ' \
                    'is an invalid URL.'.format(patch))

    @staticmethod
    def validate_versions(versions):
        if not versions:
            raise IsEmptyError('Patchset versions cannot be empty.')
        if type(versions) is not list:
            raise InvalidTypeError('Patchset versions are not a list.')

        for version in versions:
            Patchset.validate_version(version)

    @staticmethod
    def validate_patches(patches):
        if not patches:
            raise IsEmptyError('Patchset patches cannot be empty.')
        if type(patches) is not list:
            raise InvalidTypeError('Patchset patches are not a list.')

        for patch in patches:
            Patchset.validate_patch(patch)

    @staticmethod
    def create(data):
        versions = data.get('versions')
        Patchset.validate_versions(versions)

        patches = data.get('patches')
        Patchset.validate_patches(patches)

        patchset = Patchset(versions=versions, patches=patches)

        return patchset

class Cve(Document):
    name = StringField(required=True, primary_key=True)
    notes = StringField(default='')
    score = FloatField(min_value=0, max_value=10, required=True)
    tags = ListField(StringField(), default=[])
    patchsets = EmbeddedDocumentListField(Patchset, required=True)

    @staticmethod
    def validate_name(name):
        if not name:
            raise IsEmptyError('CVE name cannot be empty.')
        if type(name) not in [unicode, str]:
            raise InvalidTypeError('CVE name is not a string.')
        if name[:3] not in ['CVE', 'LVT']:
            raise ValidationError('CVE name "{}" does not ' \
                    'begin with "CVE" or "LVT".'.format(name))

    @staticmethod
    def validate_notes(notes):
        if type(notes) not in [unicode, str]:
            raise ValidationError('CVE notes are not a string.')

    @staticmethod
    def validate_score(score):
        if score is None:
            raise IsEmptyError('CVE score cannot be empty.')
        if type(score) not in [float, int]:
            raise InvalidTypeError('CVE score is not a number.')
        if score < 0 or score > 10:
            raise ValidationError('CVE score {} is not ' \
                    'between 0 and 10, inclusive.'.format(score))

    @staticmethod
    def validate_tags(tags):
        if type(tags) is not list:
            raise InvalidTypeError('CVE tags are not a list.')
        for tag in tags:
            if type(tag) not in [unicode, str]:
                raise InvalidTypeError('CVE tag is not a string.')

    @staticmethod
    def create(data):
        name = data.get('name')
        Cve.validate_name(name)

        notes = data.get('notes', '')
        Cve.validate_notes(notes)

        score = data.get('score', get_cve_score(name))
        Cve.validate_score(score)

        tags = data.get('tags', [])
        Cve.validate_tags(tags)

        patchsets_data = data.get('patchsets')
        if not patchsets_data:
            raise IsEmptyError('CVE patchsets cannot be empty.')
        patchsets = []
        for patchset_data in patchsets_data:
            patchset = Patchset.create(patchset_data)

            patchsets.append(patchset)

        try:
            cve = Cve.objects.get(name=name)
            raise AlreadyExistsError('CVE "{}" already exists.'.format(name))
        except AlreadyExistsError as e:
            raise e
        except DoesNotExist:
            pass

        cve = Cve(name=name, notes=notes, score=score, tags=tags,
                patchsets=patchsets)

        return cve

    def patch(self, data):
        notes = data.get('notes')
        if notes is not None:
            Cve.validate_notes(notes)
            self.notes = notes

        score = data.get('score')
        if score is not None:
            Cve.validate_score(score)
            self.score = score

        tags = data.get('tags')
        if tags is not None:
            Cve.validate_tags(tags)
            self.tags = tags

        patchsets_data = data.get('patchsets')
        if patchsets_data is not None:
            if not patchsets_data:
                raise IsEmptyError('CVE patchsets cannot be empty.')

            patchsets = []
            for patchset_data in patchsets_data:
                patchset = Patchset.create(patchset_data)
                patchsets.append(patchset)

            self.patchsets = patchsets

        return self

    def get_statuses(self, all_branches=False):
        kernels_list = Status.objects(cve=self).no_dereference() \
                .only('kernel', 'branch', 'value')
        statuses = {}
        for status in kernels_list:
            if status.kernel.id not in statuses:
                statuses[status.kernel.id] = {}

            statuses[status.kernel.id][status.branch] = status.value

        if not all_branches:
            return statuses

        kernels = Kernel.objects()
        for kernel in kernels:
            if kernel.repo not in statuses:
                statuses[kernel.repo] = {}

            for branch in kernel.branches:
                if branch.name not in statuses[kernel.repo]:
                    statuses[kernel.repo][branch.name] = \
                            StatusValues['unpatched']

        return statuses

class Branch(EmbeddedDocument):
    name = StringField(required=True, choices=BranchNames)
    version = StringField(required=True, choices=KernelVersions)
    patched_cves = IntField(default=0)
    unaffected_cves = IntField(default=0)
    percentage = IntField()

    @staticmethod
    def validate_name(name):
        if name not in BranchNames:
            raise ValidationError('Branch name "{}" is invalid.'.format(name))

    @staticmethod
    def validate_version(version):
        if version not in KernelVersions:
            raise ValidationError('Branch version "{}" ' \
                    'is invalid.'.format(version))

    @staticmethod
    def name_in(name, branches):
        found_branch = None
        for branch in branches:
            if name == branch.name:
                found_branch = branch
        return found_branch

    @staticmethod
    def validate_name_in(name, branches):
        branch = Branch.name_in(name, branches)
        if not branch:
            raise DoesNotExistError('Branch with name "{}" ' \
                    'does not exist.'.format(name))
        return branch

    @staticmethod
    def validate_name_not_in(name, branches):
        if Branch.name_in(name, branches):
            raise AlreadyExistsError('Branch with name "{}" ' \
                    'already exist.'.format(name))

    @staticmethod
    def create(name, version):
        Branch.validate_name(name)
        Branch.validate_version(version)

        branch = Branch(name=name, version=version)
        return branch

    @staticmethod
    def create_in(name, version, branches):
        Branch.validate_name_not_in(name, branches)
        branch = Branch.create(name, version)
        branches.append(branch)
        return branch

    @staticmethod
    def create_multiple_in(branches_data, branches):
        for branch_data in branches_data:
            name = branch_data.get('name')
            version = branch_data.get('version')
            Branch.create_in(name, version, branches)

    def set_percentage(self, total_cves):
        if self.unaffected_cves == total_cves:
            percentage = 0
        else:
            percentage = self.patched_cves * 100 / \
                    (total_cves - self.unaffected_cves)

        self.percentage = percentage

    def change_status(self, cve_name, value):
        cve = Cve.objects.with_id(cve_name)
        if not cve:
            raise DoesNotExistError('CVE "{}" does not exist.'.format(cve_name))

        Status.validate_value(value)

        kernel = self._instance

        try:
            status = Status.objects.get(cve=cve, kernel=kernel,
                    branch=self.name)

            if value == status.value:
                return status

            if status.value == StatusValues['patched']:
                self.patched_cves -= 1

            if status.value == StatusValues['unaffected']:
                self.unaffected_cves -= 1

            status.value = value
        except DoesNotExist:
            if value == StatusValues['unpatched']:
                return None

            status = Status(cve=cve, kernel=kernel,
                    branch=self.name, value=value)

        if status.value == StatusValues['patched']:
            self.patched_cves += 1

        if status.value == StatusValues['unaffected']:
            self.unaffected_cves += 1

        return status

    def change_statuses(self, cve_names, value):
        statuses = []
        for cve_name in cve_names:
            status = self.change_status(cve_name, value)
            if status:
                statuses.append(status)

        return statuses

    def get_statuses(self, all_statuses=False):
        kernel = self._instance

        cves_list = Status.objects(kernel=kernel, branch=self.name) \
                .no_dereference().only('cve', 'value')
        statuses = {}
        for status in cves_list:
            statuses[status.cve.id] = status.value

        if not all_statuses:
            return statuses

        cves = Cve.objects.scalar('name')
        for cve in cves:
            if cve not in statuses:
                statuses[cve] = StatusValues['unpatched']

        return statuses

class Kernel(Document):
    repo = StringField(required=True, primary_key=True)
    vendor = StringField(required=True)
    device = StringField(required=True)
    deprecated = BooleanField(default=False)
    default_branch = StringField(choices=BranchNames, required=True)
    default_branch_percentage = IntField()
    branches = EmbeddedDocumentListField(Branch, required=True)

    @staticmethod
    def validate_deprecated(v):
        if type(v) is not bool:
            raise InvalidTypeError('Kernel deprecated is not a boolean.')

    @staticmethod
    def create(data):
        repo = data.get('repo')
        vendor, device = repo_to_vendor_device(repo)

        deprecated = data.get('deprecated', False)
        Kernel.validate_deprecated(deprecated)

        branches_data = data.get('branches')
        branches = []
        Branch.create_multiple_in(branches_data, branches)

        default_branch = data.get('default_branch')
        Branch.validate_name_in(default_branch, branches)

        try:
            kernel = Kernel.objects.get(vendor=vendor, device=device)
            raise AlreadyExistsError('Kernel "{}" already exists.'.format(repo))
        except AlreadyExistsError as e:
            raise e
        except DoesNotExist:
            pass

        kernel = Kernel(repo=repo, vendor=vendor, device=device,
                deprecated=deprecated, branches=branches,
                default_branch=default_branch)

        return kernel

    def branch_with_name(self, name):
        return Branch.name_in(name, self.branches)

    def validate_branch_with_name(self, name):
        return Branch.validate_name_in(name, self.branches)

    def validate_no_branch_with_name(self, name):
        Branch.validate_name_not_in(name, self.branches)

    def create_branch(self, name, version):
        Branch.create_in(name, version, self.branches)

    def create_branches(self, branches_data):
        Branch.create_multiple_in(branches_data, self.branches)

    def add_branches(self, branches_data):
        branches = []
        Branch.create_multiple_in(branches_data, branches)

        for branch in self.branches:
            Branch.validate_name_in(branch.name, branches)

        for branch in branches:
            if not self.branch_with_name(branch.name):
                self.create_branch(branch.name, branch.version)

    def sort_branches(self):
        self.branches.sort(key=itemgetter('name'))

    def set_percentages(self, total_cves):
        for branch in self.branches:
            branch.set_percentage(total_cves)

        default_branch = self.branch_with_name(self.default_branch)
        self.default_branch_percentage = default_branch.percentage

    def patch(self, data):
        deprecated = data.get('deprecated')
        if deprecated is not None:
            Kernel.validate_deprecated(deprecated)
            self.deprecated = deprecated

        branches_data = data.get('branches')
        if branches_data is not None:
            self.add_branches(branches_data)

        default_branch = data.get('default_branch')
        if default_branch is not None:
            self.validate_branch_with_name(default_branch)
            self.default_branch = default_branch

        return self

class Status(Document):
    value = IntField(required=True, choices=StatusChoices)
    cve = ReferenceField(Cve, required=True, reverse_delete_rule=CASCADE)
    kernel = ReferenceField(Kernel, required=True, reverse_delete_rule=CASCADE)
    branch = StringField(required=True, choices=BranchNames)

    @staticmethod
    def validate_value(value):
        if value not in StatusChoices:
            raise ValidationError('Status value {} is invalid.'.format(value))
