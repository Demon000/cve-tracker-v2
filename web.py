from flask import Blueprint, redirect, render_template, request
from classes import *
from errors import *

web = Blueprint('web', __name__,
        template_folder='templates', static_folder='static')

@web.route('/', methods=['GET'])
def get_root():
    return render_template('index.html')

def group_kernels(kernels):
    vendors = {}

    for kernel in kernels:
        if kernel.vendor not in vendors:
            vendors[kernel.vendor] = []
        vendors[kernel.vendor].append(kernel)

    return vendors

def render_kernels(deprecated):
    kernels = Kernel.objects(deprecated=deprecated) \
            .order_by('repo')

    cves_count = Cve.objects.count()
    for kernel in kernels:
        kernel.set_percentages(cves_count)

    vendors = group_kernels(kernels)

    return render_template('kernels.html',
            deprecated=deprecated,
            vendors=vendors)

@web.route('/kernels', methods=['GET'])
def get_kernels():
    return render_kernels(False)

@web.route('/deprecated_kernels', methods=['GET'])
def get_deprecated_kernels():
    return render_kernels(True)

def render_kernel_branch(kernel, branch_name):
    active_branch = kernel.branch_with_name(branch_name)
    if not active_branch:
        raise DoesNotExistError('Branch does not exist.')

    cves = Cve.objects.only('name', 'score').order_by('name')

    cves_count = cves.count()
    active_branch.set_percentage(cves_count)

    statuses = active_branch.get_statuses(True)

    kernel.sort_branches()

    return render_template('kernel.html',
            kernel=kernel,
            active_branch=active_branch,
            cves=cves,
            statuses=statuses,
            status_descriptions=StatusDescriptions)

@web.route('/kernels/<repo>/<branch_name>', methods=['GET'])
def get_kernel_branch(repo, branch_name):
    kernel = Kernel.objects.with_id(repo)
    if not kernel:
        raise DoesNotExistError('Kernel does not exist.')

    return render_kernel_branch(kernel, branch_name)

@web.route('/cves/<name>', methods=['GET'])
def get_cve(name):
    cve = Cve.objects.with_id(name)
    if not cve:
        return json_response_error({
            'message': 'CVE does not exist.'
        }, 400)

    statuses = cve.get_statuses(True)

    kernels = Kernel.objects(deprecated=False).order_by('repo') \
            .only('repo', 'vendor', 'device', 'default_branch')
    vendors = group_kernels(kernels)

    return render_template('cve.html',
            cve=cve,
            vendors=vendors,
            statuses=statuses,
            status_descriptions=StatusDescriptions)

@web.errorhandler(DoesNotExistError)
def validation_error_handler(e):
    return render_template('error.html',
            message=e.message)
