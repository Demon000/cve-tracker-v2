from flask import Blueprint, redirect, render_template, request, session
from classes import *
from errors import *

from operator import itemgetter

web = Blueprint('web', __name__,
        template_folder='templates', static_folder='static')

@web.record
def record_params(setup_state):
    app = setup_state.app
    web.config = app.config
    web.github = app.github

def needs_login():
    return web.config['GITHUB_ORG'] is not None

def has_login():
    if not needs_login():
        return True

    return 'github_token' in session

@web.context_processor
def inject_context():
    return {
        'sources_org': web.config['GITHUB_SOURCES_ORG'],
        'status_descriptions': StatusDescriptions,
        'branch_names': BranchNames,
        'kernel_versions': KernelVersions
    }

@web.route("/login", methods=['GET'])
def login():
    next_url = get_redirect_back_urk()
    if not web.has_login():
        session['next_url'] = next_url
        return web.github.authorize(scope="user:email, read:org")

    return redirect(next_url)

@web.route('/login/authorized', methods=['GET'])
@web.github.authorized_handler
def authorized(access_token):
    next_url = session['next_url']

    if access_token is None:
        raise LoginError('GitHub login failed.')

    req = web.github.raw_request("GET", "user/orgs", access_token=access_token)
    if req.status_code is not 200:
        raise LoginError('GitHub login failed.')

    org_names = []
    orgs = req.json()
    for org in orgs:
        org_names.append(org['login'])

    target_org = web.config['GITHUB_ORG']
    if target_org not in orgs:
        raise LoginError('User is not in "{}" organization.'.format(target_org))

    req = web.github.raw_request("GET", "user", access_token=access_token)
    if req.status_code is not 200:
        raise LoginError('GitHub login failed.')

    user = req.json()
    username = user['login']

    session['github_token'] = access_token
    session['username'] = username

    return redirect(next_url)

@web.route("/logout", methods=['GET'])
def logout():
    session.pop('github_token')
    session.pop('username')

    next_url = get_redirect_back_urk()

    return redirect(next_url)

@web.route('/', methods=['GET'])
def get_root():
    return render_template('index.html')

def group_kernels(kernels):
    vendors = {}

    for kernel in kernels:
        if kernel.vendor not in vendors:
            vendors[kernel.vendor] = []
        vendors[kernel.vendor].append(kernel)

    vendors_list = []
    for vendor, kernels in vendors.items():
        vendors_list.append({
            'name': vendor,
            'kernels': kernels
        })

    vendors_list.sort(key=itemgetter('name'))

    return vendors_list

def render_kernels(deprecated):
    kernels = Kernel.objects(deprecated=deprecated) \
            .order_by('repo')

    cves_count = Cve.objects.count()
    for kernel in kernels:
        kernel.set_percentages(cves_count)

    vendors = group_kernels(kernels)

    return render_template('kernels.html',
            deprecated=deprecated,
            vendors=vendors)

@web.route('/kernels', methods=['GET'])
def get_kernels():
    return render_kernels(False)

@web.route('/deprecated_kernels', methods=['GET'])
def get_deprecated_kernels():
    return render_kernels(True)

def render_kernel_branch(kernel, branch_name):
    active_branch = kernel.branch_with_name(branch_name)
    if not active_branch:
        raise DoesNotExistError('Branch does not exist.')

    cves = Cve.objects.only('name', 'score').order_by('name')

    cves_count = cves.count()
    active_branch.set_percentage(cves_count)

    statuses = active_branch.get_statuses(True)

    kernel.sort_branches()

    return render_template('kernel.html',
            kernel=kernel,
            active_branch=active_branch,
            cves=cves,
            statuses=statuses)

@web.route('/kernels/<repo>/<branch_name>', methods=['GET'])
def get_kernel_branch(repo, branch_name):
    kernel = Kernel.objects.with_id(repo)
    if not kernel:
        raise DoesNotExistError('Kernel does not exist.')

    return render_kernel_branch(kernel, branch_name)

@web.route('/cves/<name>', methods=['GET'])
def get_cve(name):
    cve = Cve.objects.with_id(name)
    if not cve:
        return json_response_error({
            'message': 'CVE does not exist.'
        }, 400)

    statuses = cve.get_statuses(True)

    kernels = Kernel.objects(deprecated=False).order_by('repo') \
            .only('repo', 'vendor', 'device', 'default_branch')
    vendors = group_kernels(kernels)

    return render_template('cve.html',
            cve=cve,
            vendors=vendors,
            statuses=statuses)

@web.errorhandler(DoesNotExistError)
@web.errorhandler(LoginError)
def validation_error_handler(e):
    return render_template('error.html',
            message=e.message)
