from flask import Blueprint, redirect, render_template, request
from classes import *

web = Blueprint('web', __name__,
        template_folder='templates', static_folder='static')

def render_error(message):
    return render_template('error.html',
            message=message)

@web.route('/', methods=['GET'])
def get_root():
    return render_template('index.html')

def render_kernels(deprecated):
    kernels = Kernel.objects(deprecated=deprecated) \
            .order_by('repo')

    cves_count = Cve.objects.count()
    vendors = {}
    for kernel in kernels:
        if kernel.vendor not in vendors:
            vendors[kernel.vendor] = []
        vendors[kernel.vendor].append(kernel)

        kernel.set_percentages(cves_count)

    return render_template('kernels.html',
            deprecated=deprecated,
            vendors=vendors)

@web.route('/kernels', methods=['GET'])
def get_kernels():
    return render_kernels(False)

@web.route('/deprecated_kernels', methods=['GET'])
def get_deprecated_kernels():
    return render_kernels(True)

def render_kernel_branch(kernel, branch_name):
    active_branch = kernel.branch_with_name(branch_name)
    if not active_branch:
        return render_error('Branch does not exist.')

    cves = Cve.objects.only('name', 'score').order_by('name')

    cves_count = cves.count()
    active_branch.set_percentage(cves_count)

    statuses_list = Status.objects(kernel=kernel, branch=branch_name) \
        .no_dereference().only('cve', 'value')
    statuses = {}
    for status in statuses_list:
        statuses[status.cve.id] = status.value

    for cve in cves:
        if cve.name not in statuses:
            statuses[cve.name] = StatusValues['unpatched']

    return render_template('kernel.html',
            kernel=kernel,
            active_branch=active_branch,
            cves=cves,
            statuses=statuses,
            status_descriptions=StatusDescriptions)

@web.route('/kernels/<repo>/<branch_name>', methods=['GET'])
def get_kernel_branch(repo, branch_name):
    kernel = Kernel.objects.with_id(repo)
    if not kernel:
        return render_error('Kernel does not exist.')

    return render_kernel_branch(kernel, branch_name)
