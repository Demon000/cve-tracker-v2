(function() {
    var percentage = document.querySelector('#percentage');
    var percentageBar = new Progress({
        element: percentage.querySelector('.progress-bar-inner'),
        field: percentage.querySelector('.progress-value'),
        value: percentage.getAttribute('data-value')
    });
    window.percentageBar = percentageBar;

    function getScoreSeverity(score) {
        var severity = 'low';

        if (score >= 9) {
            severity = 'critical';
        } else if (score >= 7) {
            severity = 'high';
        } else if (score >= 4) {
            severity = 'medium';
        }

        return severity;
    }

    var cveSeveritiesNodeList = document.querySelectorAll('.cve .severity');
    var cveSeverities = [].slice.call(cveSeveritiesNodeList);
    cveSeverities.forEach(function(cveSeverity) {
        var score = cveSeverity.getAttribute('data-score');
        var severity = getScoreSeverity(score);
        cveSeverity.classList.add(severity);
    });

    var cveInfoDialog = new ExtendedDialog({
        element: document.querySelector('#cve-info-dialog'),
        access: {
            name: '.name',
            score: '.score',
            notes: '.notes',
            tags: '.tags',
            patchsets: '.patchsets'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }]
    });

    function populateCveInfoDialog(cve) {
        var dialog = cveInfoDialog;
        var severity = getScoreSeverity(cve.score);

        dialog.access.name.innerHTML = cve.name;
        dialog.access.score.innerHTML = cve.score;
        dialog.access.score.classList.add(severity);
        dialog.access.notes.value = cve.notes;
        dialog.access.tags.value = cve.tags.join(' ');
        dialog.access.patchsets.value =
            cve.patchsets.map(function(patchset) {
                var data = patchset.versions.join(' ') + '\n';
                data += patchset.patches.join('\n');
                return data;
            }).join('\n\n');
    }

    function openCveInfoDialog(name) {
        var dialog = cveInfoDialog;
        var url = '/api/v1/cves/' + name;
        apiFetcher('GET', url)
            .then(function(body) {
                if (body.success) {
                    return body.data;
                } else {
                    informationView.show('error', body.message);
                }
            })
            .then(function(cve) {
                populateCveInfoDialog(cve);
                dialog.open();
            });
    }

    var cveNamesNodeList = document.querySelectorAll('.cve .name');
    var cveNames = [].slice.call(cveNamesNodeList);
    cveNames.forEach(function(cveName) {
        var name = cveName.getAttribute('data-name');
        cveName.addEventListener('click', function() {
            openCveInfoDialog(name);
        });
    });

    var cveStatusesNodeList = document.querySelectorAll('.cve .status');
    var cveStatuses = [].slice.call(cveStatusesNodeList);
    var statusChoicesElement = document.querySelector('#status-choices-menu');
    var statusChoicesMenu = new ContextMenu({
        element: statusChoicesElement,
        triggers: cveStatuses,
        event: 'click'
    });

    function changeStatus(repo, branch, cve, value) {
        var url = '/api/v1/kernels/' + repo + '/branches/' + branch + '/statuses';
        return apiFetcher('POST', url, {
            cves: [cve],
            value: value
        });
    }

    function handleChangeStatus(e) {
        var repo = pageData.repo;
        var branch = pageData.branchName;
        var trigger = statusChoicesMenu.trigger;
        var cve = trigger.getAttribute('data-name');
        var choice = e.currentTarget;
        var value = parseInt(choice.getAttribute('data-value'));
        var description = choice.getAttribute('data-description');

        changeStatus(repo, branch, cve, value)
        .then(function(body) {
            if (body.success) {
                trigger.setAttribute('data-value', value);
                trigger.innerHTML = description;
                statusChoicesMenu.close();
                percentageBar.set(body.percentage);
            } else {
                informationView.show('error', body.message);
            }
        });
    }

    var statusChoicesElements = [].slice.call(statusChoicesElement.children);
    statusChoicesElements.forEach(function(statusChoice) {
        statusChoice.addEventListener('click', handleChangeStatus);
    });

    var patchsetsFormatDialog = new ExtendedDialog({
        element: document.querySelector('#patchsets-format-dialog'),
        triggers: document.querySelectorAll('.patchsets-format-dialog-triggers'),
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }]
    });

    function addCve(cve) {
        var url = '/api/v1/cves';
        return apiFetcher('POST', url, cve);
    }

    function handleAddCve(button) {
        var dialog = this;
        var name = dialog.access.name.value;
        var notes = dialog.access.notes.value;
        var score = parseFloat(dialog.access.score.value);
        var tags = dialog.access.tags.value.split(' ');
        var patchsets =
            dialog.access.patchsets.value
            .split('\n\n')
            .map(function(group) {
                var lines = group.split('\n');
                var versions = lines[0].split(' ');
                var patches = lines.slice(1);
                return {
                    versions: versions,
                    patches: patches
                };
            });

        button.disabled = true;

        addCve({
            'name': name,
            'notes': notes,
            'score': score,
            'tags': tags,
            'patchsets': patchsets
        })
        .then(function(body) {
            var type = body.success ? 'success' : 'error';
            informationView.show(type, body.message);
            if (body.success) {
                dialog.close();
                location.reload();
            }
            button.disabled = false;
        });
    }

    var addCveDialog = new ExtendedDialog({
        element: document.querySelector('#add-cve-dialog'),
        trigger: document.querySelector('#add-cve-dialog-trigger'),
        access: {
            name: '.name',
            notes: '.notes',
            score: '.score',
            tags: '.tags',
            patchsets: '.patchsets'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .add',
            callback: handleAddCve
        }]
    });
})();
