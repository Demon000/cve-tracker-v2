(function() {
    var percentage = document.querySelector('#percentage');
    var percentageBar = new Progress({
        element: percentage.querySelector('.progress-bar-inner'),
        field: percentage.querySelector('.progress-value'),
        value: percentage.getAttribute('data-value')
    });
    window.percentageBar = percentageBar;

    function getScoreSeverity(score) {
        var severity = 'low';

        if (score >= 9) {
            severity = 'critical';
        } else if (score >= 7) {
            severity = 'high';
        } else if (score >= 4) {
            severity = 'medium';
        }

        return severity;
    }

    var cveSeverities = document.querySelectorAll('.cve .severity');
    _.each(cveSeverities, function(cveSeverity) {
        var score = cveSeverity.getAttribute('data-score');
        var severity = getScoreSeverity(score);
        cveSeverity.classList.add(severity);
    });

    var cveInfoPatchsetsList = new ListView({
        container: document.querySelector('#cve-info-dialog .patchsets'),
        template: document.querySelector('#patchset-template').innerHTML
    });

    var cveInfoDialog = new ExtendedDialog({
        element: document.querySelector('#cve-info-dialog'),
        triggers: document.querySelectorAll('.cve .name'),
        methods: {
            populate: function(cve) {
                var dialog = this;
                var severity = getScoreSeverity(cve.score);

                dialog.access.name.innerHTML = cve.name;
                dialog.access.score.innerHTML = cve.score;
                dialog.access.score.classList.add(severity);
                dialog.access.notes.value = cve.notes;
                dialog.access.tags.value = cve.tags.join(' ');
                cveInfoPatchsetsList.setData(cve.patchsets);
            },
            open: function(trigger) {
                var dialog = this;
                var name = trigger.getAttribute('data-name');
                apiV1.cve(name)
                .get()
                .then(function(body) {
                    dialog.populate(body.data);
                    dialog._open();
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                });
            }
        },
        access: {
            name: '.name',
            score: '.score',
            notes: '.notes',
            tags: '.tags'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }]
    });

    var statusChoicesElement = document.querySelector('#status-choices-menu');
    var statusChoicesMenu = new ContextMenu({
        element: statusChoicesElement,
        triggers: document.querySelectorAll('.cve .status'),
        event: 'click'
    });

    function handleChangeStatus(e) {
        var repo = pageData.repo;
        var branch = pageData.branchName;
        var trigger = statusChoicesMenu.trigger;
        var cve = trigger.getAttribute('data-name');
        var choice = e.currentTarget;
        var value = parseInt(choice.getAttribute('data-value'), 10);
        var description = choice.getAttribute('data-description');

        apiV1.branch(repo, branch)
        .changeStatuses([cve], value)
        .then(function(body) {
            trigger.setAttribute('data-value', value);
            trigger.innerHTML = description;
            statusChoicesMenu.close();
            percentageBar.set(body.percentage);
        })
        .catch(function(body) {
            informationView.show('error', body.message);
        });
    }

    var statusChoices = statusChoicesElement.children;
    _.each(statusChoices, function(statusChoice) {
        statusChoice.addEventListener('click', handleChangeStatus);
    });

    var addCvePatchsetsList = new ListView({
        container: document.querySelector('#add-cve-dialog .patchsets'),
        template: document.querySelector('#patchset-template').innerHTML
    });

    var patchsetDialog = new ExtendedDialog({
        element: document.querySelector('#patchset-dialog'),
        methods: {
            populate: function(patchset) {
                var dialog = this;
                dialog.access.versions.value = patchset.versions.join(' ');
                dialog.access.patches.value = patchset.patches.join('\n');
            },
            get: function() {
                var dialog = this;
                var versions = dialog.access.versions.value.split(' ');
                var patches = dialog.access.patches.value.split('\n');
                return {
                    versions: versions,
                    patches: patches
                };
            },
            openAdd: function(callback) {
                var dialog = this;
                dialog.element.classList.remove('editing');
                dialog.element.classList.add('adding');
                dialog.addCallback = callback;
                dialog.open();
            },
            add: function(button) {
                var dialog = this;
                dialog.addCallback(dialog.get());
                dialog.close();
            },
            openEdit: function(patchset, callback) {
                var dialog = this;
                dialog.element.classList.remove('adding');
                dialog.element.classList.add('editing');
                dialog.saveCallback = callback;
                dialog.populate(patchset);
                dialog.open();
            },
            save: function() {
                var dialog = this;
                dialog.saveCallback(dialog.get());
                dialog.close();
            },
        },
        access: {
            versions: '.versions',
            patches: '.patches'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .add',
            callback: 'add'
        }, {
            selector: '.actions .save',
            callback: 'save'
        }]
    });

    var addPatchsetDialogTrigger = document.querySelector('#add-patchset-dialog-trigger');
    addPatchsetDialogTrigger.addEventListener('click', function() {
        patchsetDialog.openAdd(addCvePatchsetsList.add);
    });

    addCvePatchsetsList.emitter.on('set', function(data, index, list) {
        var element = data._element;
        var editButton = element.querySelector('.edit');
        var deleteButton = element.querySelector('.delete');
        deleteButton.addEventListener('click', function() {
            addCvePatchsetsList.remove(data);
        });
        editButton.addEventListener('click', function() {
            patchsetDialog.openEdit(data, function(newData) {
                addCvePatchsetsList.set(newData, index);
            });
        });
    });

    var addCveDialog = new ExtendedDialog({
        element: document.querySelector('#add-cve-dialog'),
        trigger: document.querySelector('#add-cve-dialog-trigger'),
        methods: {
            add: function(button) {
                var dialog = this;
                var name = dialog.access.name.value;
                var notes = dialog.access.notes.value;
                var tags = dialog.access.tags.value.split(' ');
                var patchsets = addCvePatchsetsList.getData();

                button.disabled = true;

                apiV1.cves()
                .add({
                    'name': name,
                    'notes': notes,
                    'tags': tags,
                    'patchsets': patchsets
                })
                .then(function(body) {
                    dialog.close();
                    location.reload();
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                    button.disabled = false;
                });
            }
        },
        access: {
            name: '.name',
            notes: '.notes',
            tags: '.tags'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .add',
            callback: 'add'
        }]
    });

    var importStatusesDialog = new ExtendedDialog({
        element: document.querySelector('#import-statuses-dialog'),
        trigger: document.querySelector('#import-statuses-dialog-trigger'),
        methods: {
            import: function(button) {
                var dialog = this;
                var repo = pageData.repo;
                var branch = pageData.branchName;
                var fromRepo = dialog.access.repo.value;
                var fromBranch = dialog.access.branch.value;
                var override = dialog.access.override.checked;

                button.disabled = true;

                apiV1.branch(repo, branch)
                .importStatuses(fromRepo, fromBranch, override)
                .then(function(body) {
                    dialog.close();
                    location.reload();
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                    button.disabled = false;
                });
            }
        },
        access: {
            repo: '.repo',
            branch: '.branch',
            override: '#override'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .import',
            callback: 'import'
        }]
    });

    var editKernelDialog = new ExtendedDialog({
        element: document.querySelector('#edit-kernel-dialog'),
        trigger: document.querySelector('#edit-kernel-dialog-trigger'),
        methods: {
            save: function(button) {
                var dialog = this;
                var repo = pageData.repo;
                var deprecated = dialog.access.deprecated.checked;
                var defaultBranch = dialog.access.defaultBranch.value;
                var branches =
                    dialog.access.branches.value
                    .split(' ')
                    .map(function(pair) {
                        var values = pair.split('=');
                        return {
                            name: values[0],
                            version: values[1]
                        };
                    });

                button.disabled = true;

                apiV1.kernel(repo)
                .edit({
                    'deprecated': deprecated,
                    'branches': branches,
                    'default_branch': defaultBranch
                })
                .then(function(body) {
                    dialog.close();
                    location.reload();
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                    button.disabled = false;
                });
            },
            populate: function(kernel) {
                var dialog = this;
                dialog.access.deprecated.checked = kernel.deprecated;
                dialog.access.defaultBranch.value = kernel.default_branch;
                dialog.access.branches.value =
                    kernel.branches
                    .map(function(branch) {
                        return branch.name + '=' + branch.version;
                    }).join(' ');
            },
            open: function() {
                var dialog = this;
                var repo = pageData.repo;
                apiV1.kernel(repo)
                .get()
                .then(function(body) {
                    dialog.populate(body.data);
                    dialog._open();
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                });
            }
        },
        access: {
            deprecated: '#deprecated',
            branches: '.branches',
            defaultBranch: '.default-branch'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .save',
            callback: 'save'
        }]
    });
})();
