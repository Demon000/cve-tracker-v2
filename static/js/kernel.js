(function() {
    var percentage = document.querySelector('#percentage');
    var percentageBar = new Progress({
        element: percentage.querySelector('.progress-bar-inner'),
        field: percentage.querySelector('.progress-value'),
        value: percentage.getAttribute('data-value')
    });
    window.percentageBar = percentageBar;

    function getScoreSeverity(score) {
        var severity = 'low';

        if (score >= 9) {
            severity = 'critical';
        } else if (score >= 7) {
            severity = 'high';
        } else if (score >= 4) {
            severity = 'medium';
        }

        return severity;
    }

    var cveSeverities = document.querySelectorAll('.cve .severity');
    _.each(cveSeverities, function(cveSeverity) {
        var score = cveSeverity.getAttribute('data-score');
        var severity = getScoreSeverity(score);
        cveSeverity.classList.add(severity);
    });

    var cveInfoDialog = new ExtendedDialog({
        element: document.querySelector('#cve-info-dialog'),
        access: {
            name: '.name',
            score: '.score',
            notes: '.notes',
            tags: '.tags',
            patchsets: '.patchsets'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }]
    });

    function populateCveInfoDialog(cve) {
        var dialog = cveInfoDialog;
        var severity = getScoreSeverity(cve.score);

        dialog.access.name.innerHTML = cve.name;
        dialog.access.score.innerHTML = cve.score;
        dialog.access.score.classList.add(severity);
        dialog.access.notes.value = cve.notes;
        dialog.access.tags.value = cve.tags.join(' ');
        dialog.access.patchsets.value =
            cve.patchsets.map(function(patchset) {
                var data = patchset.versions.join(' ') + '\n';
                data += patchset.patches.join('\n');
                return data;
            }).join('\n\n');
    }

    function openCveInfoDialog(name) {
        var dialog = cveInfoDialog;
        var url = '/api/v1/cves/' + name;
        apiFetcher('GET', url)
        .then(function(body) {
            if (body.success) {
                return body.data;
            } else {
                informationView.show('error', body.message);
            }
        })
        .then(function(cve) {
            populateCveInfoDialog(cve);
            dialog.open();
        });
    }

    var cveNames = document.querySelectorAll('.cve .name');
    _.each(cveNames, function(cveName) {
        var name = cveName.getAttribute('data-name');
        cveName.addEventListener('click', function() {
            openCveInfoDialog(name);
        });
    });

    var cveStatuses = _.toArray(document.querySelectorAll('.cve .status'));
    var statusChoicesElement = document.querySelector('#status-choices-menu');
    var statusChoicesMenu = new ContextMenu({
        element: statusChoicesElement,
        triggers: cveStatuses,
        event: 'click'
    });

    function changeStatus(repo, branch, cve, value) {
        var url = '/api/v1/kernels/' + repo + '/' + branch + '/statuses';
        return apiFetcher('POST', url, {
            cves: [cve],
            value: value
        });
    }

    function handleChangeStatus(e) {
        var repo = pageData.repo;
        var branch = pageData.branchName;
        var trigger = statusChoicesMenu.trigger;
        var cve = trigger.getAttribute('data-name');
        var choice = e.currentTarget;
        var value = parseInt(choice.getAttribute('data-value'), 10);
        var description = choice.getAttribute('data-description');

        changeStatus(repo, branch, cve, value)
        .then(function(body) {
            if (body.success) {
                trigger.setAttribute('data-value', value);
                trigger.innerHTML = description;
                statusChoicesMenu.close();
                percentageBar.set(body.percentage);
            } else {
                informationView.show('error', body.message);
            }
        });
    }

    var statusChoices = statusChoicesElement.children;
    _.each(statusChoices, function(statusChoice) {
        statusChoice.addEventListener('click', handleChangeStatus);
    });

    function addCve(cve) {
        var url = '/api/v1/cves';
        return apiFetcher('POST', url, cve);
    }

    function handleAddCve(button) {
        var dialog = this;
        var name = dialog.access.name.value;
        var notes = dialog.access.notes.value;
        var score = parseFloat(dialog.access.score.value);
        var tags = dialog.access.tags.value.split(' ');
        var patchsets =
            dialog.access.patchsets.value
            .split('\n\n')
            .map(function(group) {
                var lines = group.split('\n');
                var versions = lines[0].split(' ');
                var patches = lines.slice(1);
                return {
                    versions: versions,
                    patches: patches
                };
            });

        button.disabled = true;

        addCve({
            'name': name,
            'notes': notes,
            'score': score,
            'tags': tags,
            'patchsets': patchsets
        })
        .then(function(body) {
            var type = body.success ? 'success' : 'error';
            informationView.show(type, body.message);
            if (body.success) {
                dialog.close();
                location.reload();
            }
            button.disabled = false;
        });
    }

    var addCveDialog = new ExtendedDialog({
        element: document.querySelector('#add-cve-dialog'),
        trigger: document.querySelector('#add-cve-dialog-trigger'),
        access: {
            name: '.name',
            notes: '.notes',
            score: '.score',
            tags: '.tags',
            patchsets: '.patchsets'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .add',
            callback: handleAddCve
        }]
    });

    function importStatuses(toRepo, toBranch, fromRepo, fromBranch, override) {
        var url = '/api/v1/kernels/' + toRepo + '/' + toBranch + '/import_statuses';
        return apiFetcher('POST', url, {
            'repo': fromRepo,
            'branch': fromBranch,
            'override': override
        });
    }

    function handleImportStatuses(button) {
        var dialog = this;
        var toRepo = pageData.repo;
        var toBranch = pageData.branchName;
        var fromRepo = dialog.access.repo.value;
        var fromBranch = dialog.access.branch.value;
        var override = dialog.access.override.checked;

        button.disabled = true;

        importStatuses(toRepo, toBranch, fromRepo, fromBranch, override)
        .then(function(body) {
            var type = body.success ? 'success' : 'error';
            informationView.show(type, body.message);
            if (body.success) {
                dialog.close();
                location.reload();
            }
            button.disabled = false;
        });

    }

    var importStatusesDialog = new ExtendedDialog({
        element: document.querySelector('#import-statuses-dialog'),
        trigger: document.querySelector('#import-statuses-dialog-trigger'),
        access: {
            repo: '.repo',
            branch: '.branch',
            override: '#override'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .import',
            callback: handleImportStatuses
        }]
    });

    function editKernel(repo, data) {
        var url = '/api/v1/kernels/' + repo;
        return apiFetcher('PATCH', url, data);
    }

    function handleSaveKernel(button) {
        var dialog = this;
        var repo = pageData.repo;
        var deprecated = dialog.access.deprecated.checked;
        var defaultBranch = dialog.access.defaultBranch.value;
        var branches =
            dialog.access.branches.value
            .split(' ')
            .map(function(pair) {
                var values = pair.split('=');
                return {
                    name: values[0],
                    version: values[1]
                };
            });

        button.disabled = true;

        editKernel(repo, {
            'deprecated': deprecated,
            'branches': branches,
            'default_branch': defaultBranch
        })
        .then(function(body) {
            var type = body.success ? 'success' : 'error';
            informationView.show(type, body.message);
            if (body.success) {
                dialog.close();
                location.reload();
            }
            button.disabled = false;
        });
    }

    var editKernelDialog = new ExtendedDialog({
        element: document.querySelector('#edit-kernel-dialog'),
        access: {
            deprecated: '#deprecated',
            branches: '.branches',
            defaultBranch: '.default-branch'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .save',
            callback: handleSaveKernel
        }]
    });

    function populateEditKernelDialog(kernel) {
        var dialog = editKernelDialog;
        dialog.access.deprecated.checked = kernel.deprecated;
        dialog.access.defaultBranch.value = kernel.default_branch;
        dialog.access.branches.value =
            kernel.branches
            .map(function(branch) {
                return branch.name + '=' + branch.version;
            }).join(' ');
    }

    function openEditKernelDialog() {
        var dialog = editKernelDialog;
        var repo = pageData.repo;
        var url = '/api/v1/kernels/' + repo;
        apiFetcher('GET', url)
        .then(function(body) {
            if (body.success) {
                return body.data;
            } else {
                informationView.show('error', body.message);
            }
        })
        .then(function(kernel) {
            populateEditKernelDialog(kernel);
            dialog.open();
        });
    }

    var editKernelDialogTrigger =
            document.querySelector('#edit-kernel-dialog-trigger');
    editKernelDialogTrigger.addEventListener('click', openEditKernelDialog);

})();
