(function() {
    var kernelsCollection = {
        events: new EventEmitter(),
        url: '/api/v1/kernels',
        data: [],
        parse: function(response) {
            return response.value.data;
        },
        comparator: function(a, b) {
            return a.vendor.localeCompare(b.vendor) ||
                    a.device.localeCompare(b.device);
        },
        sort: function(kernels) {
            return kernels.sort(this.comparator);
        },
        set: function(kernels) {
            this.data = kernels;
            this.events.emit('set', this.data);
            return kernels;
        },
        fetch: function() {
            return fetcher('GET', this.url)
                .then(this.parse)
                .then(this.sort)
                .then(this.set);
        },
        add: function(kernel) {
            return fetcher('POST', this.url, kernel);
        },
        delete: function(repo) {
            var url = this.url + '/' + repo;
            return fetcher('DELETE', url);  
        },
        initialize: function() {
            _.bindAll(this, 'sort', 'set', 'fetch', 'add');
            this.fetch();
            return this;
        }
    }.initialize();

    function VendorView(options) {
        options = options || {};
        _.extend(options, {
            template: _.template(
                    document.querySelector('#vendor-template').innerHTML)
        });

        return new View(options);
    }

    var vendorsView = {
        collection: kernelsCollection,
        views: {},
        el: document.querySelector('#vendors-container'),
        clear: function(data) {
            _.each(this.views, function(view) {
                view.detach();
            });
            this.views = {};
        },
        add: function(vendor) {
            var view = new VendorView({
                parent: this.el,
                data: vendor
            });
            this.views[vendor.name] = view;
        },
        fromKernels: function(kernels) {
            var groups = _.groupBy(kernels, 'vendor');
            var vendors = [];
            _.each(groups, function(kernels, vendor) {
                vendors.push({
                    name: vendor,
                    kernels: kernels
                });
            });
            return vendors;
        },
        set: function(kernels) {
            var vendors = this.fromKernels(kernels);
            this.clear();
            _.each(vendors, this.add, this);
        },
        initialize: function() {
            _.bindAll(this, 'set');
            kernelsCollection.events.on('set', this.set);
            return this;
        }
    }.initialize();

    function handleAddKernel(button) {
        var repo = this.access.repo.value;
        var defaultBranch = this.access.defaultBranch.value;
        var branches =
            this.access.branches.value
            .split(' ')
            .map(function(pair) {
                var values = pair.split('=');
                return {
                    name: values[0],
                    version: values[1]
                };
            });

        button.disabled = true;

        kernelsCollection
        .add({
            'repo': repo,
            'branches': branches,
            'default_branch': defaultBranch
        })
        .then(kernelsCollection.fetch)
        .catch(function(response) {
            return response;
        })
        .then(function(response) {
            var type = response.ok ? 'success' : 'error';
            informationView.show(type, response.value.message);
            button.disabled = false;
        });
    }

    var addKernelDialog = ExtendedDialog({
        element: document.querySelector('#add-kernel-dialog'),
        trigger: document.querySelector('#add-kernel-dialog-trigger'),
        access: {
            repo: '.repo',
            branches: '.branches',
            defaultBranch: '.default-branch'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .add',
            callback: handleAddKernel
        }]
    });

    function handleDeleteKernel(button) {
        var repo = this.access.repo.value;

        button.disabled = true;

        kernelsCollection
        .delete(repo)
        .then(kernelsCollection.fetch)
        .catch(function(response) {
            return response;
        })
        .then(function(response) {
            var type = response.ok ? 'success' : 'error';
            informationView.show(type, response.value.message);
            button.disabled = false;
        });
    }

    var deleteKernelDialog = ExtendedDialog({
        element: document.querySelector('#delete-kernel-dialog'),
        trigger: document.querySelector('#delete-kernel-dialog-trigger'),
        access: {
            repo: '.repo'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .delete',
            callback: handleDeleteKernel
        }]
    });
})();