(function() {
    function isEscapeKey(e) {
        var isEscape = false;
        if (e.key == 'Escape' || e.key == 'Esc' || e.keyCode == 27) {
            isEscape = true;
        }
        return isEscape;
    }

    function _draggableElement(element, target, moveFn) {
        var clickOffsetX;
        var clickOffsetY;

        function dragHandler(e) {
            moveFn(e.clientX - clickOffsetX, e.clientY - clickOffsetY);
        }

        function dragEndHandler(e) {
            document.body.removeEventListener('mousemove', dragHandler);
            document.body.removeEventListener('mouseup', dragEndHandler);
        }

        function dragStart(e) {
            var boundingRect = element.getBoundingClientRect();
            clickOffsetX = e.clientX - boundingRect.left;
            clickOffsetY = e.clientY - boundingRect.top;
            document.body.addEventListener('mousemove', dragHandler);
            document.body.addEventListener('mouseup', dragEndHandler);
        }

        target.addEventListener('mousedown', dragStart);
    }

    function draggableElement(element, selector, moveFn) {
        if (!selector) {
            return;
        }

        var target = element.querySelector(selector);
        if (!target) {
            return;
        }

        if (!moveFn) {
            moveFn = moveElement.bind(null, target);
        }

        _draggableElement(element, target, moveFn);
    }

    function _resizableElement(element, target, resizeFn) {
        var clickOffsetX;
        var clickOffsetY;
        var boundingRect;

        function dragHandler(e) {
            var elementWidth = e.clientX - boundingRect.left + clickOffsetX;
            var elementHeight = e.clientY - boundingRect.top + clickOffsetY;
            resizeFn(elementWidth, elementHeight);
        }

        function dragEndHandler(e) {
            document.body.removeEventListener('mousemove', dragHandler);
            document.body.removeEventListener('mouseup', dragEndHandler);
        }

        function dragStart(e) {
            boundingRect = element.getBoundingClientRect();
            clickOffsetX = boundingRect.right - e.clientX;
            clickOffsetY = boundingRect.bottom - e.clientY;
            document.body.addEventListener('mousemove', dragHandler);
            document.body.addEventListener('mouseup', dragEndHandler);
        }

        target.addEventListener('mousedown', dragStart);
    }

    function resizableElement(element, selector, resizeFn) {
        if (!selector) {
            return;
        }

        var target = element.querySelector(selector);
        if (!target) {
            return;
        }

        if (!resizeFn) {
            resizeFn = resizeElement.bind(null, target);
        }

        _resizableElement(element, target, resizeFn);
    }

    var dialogs = [];
    var focused;
    var focusedZIndex = 1000;

    function sortDialogs() {
        dialogs.sort(function(a, b) {
            var isOpen = b.isOpen() - a.isOpen();
            var elevationDelta = b.getElevation() - a.getElevation();
            return isOpen || elevationDelta;
        });
    }

    function Dialog(o) {
        var d = this;

        if (!o.element) {
            return;
        }

        if (!o.drag) {
            o.drag = '';
        }

        if (!o.resize) {
            o.resize = '';
        }

        if (!o.actions) {
            o.actions = [];
        }

        if (!o.access) {
            o.access = {};
        }

        d.emitter = new EventEmitter();

        d.element = o.element;

        d.access = {};
        d.actions = {};

        var drag = o.drag;
        var resize = o.resize;

        d.getElevation = function() {
            return parseInt(d.element.style.zIndex, 10);
        };

        d.setElevation = function(elevation) {
            d.element.style.zIndex = elevation;
        };

        d.isFocused = function() {
            return focused == d;
        };

        d.focus = function() {
            if (!d.isFocused()) {
                d.setElevation(focusedZIndex++);
                focused = d;
            }
            d.emitter.emit('focused');
        };

        d.isOpen = function() {
            return d.element.classList.contains('open');
        };

        d.close = d._close = function() {
            window.removeEventListener('resize', d.center);
            window.removeEventListener('resize', d.limit);
            d.element.classList.remove('open');
            d.emitter.emit('closed');
        };

        d.open = d._open = function() {
            window.addEventListener('resize', d.center);
            window.addEventListener('resize', d.limit);
            d.center();
            d.limit();
            d.focus();
            d.element.classList.add('open');
            d.emitter.emit('opened');
        };

        d.measuring = function(state) {
            if (!d.isOpen()) {
                if (state) {
                    d.element.classList.add('measure');
                } else {
                    d.element.classList.remove('measure');
                }
            }
        };

        d.measure = function() {
            d.measuring(true);
            var measures = d.element.getBoundingClientRect();
            d.measuring(false);
            return measures;
        };

        d.move = function(x, y) {
            moveElement(d.element, x, y);
            d.emitter.emit('moved');
        };

        d.center = function() {
            var measures = d.measure();
            var x = (window.innerWidth - measures.width) / 2;
            var y = (window.innerHeight - measures.height) / 2;
            d.move(x, y);
        };

        d.resize = function(width, height) {
            resizeElement(d.element, width, height);
            d.emitter.emit('resized');
        };

        d.limit = function() {
            var measures = d.measure();

            var width = measures.width;
            if (width > window.innerWidth) {
                width = window.innerWidth;
            }

            var height = measures.height;
            if (height > window.innerHeight) {
                height = window.innerHeight;
            }

            d.resize(width, height);
        };

        draggableElement(d.element, drag, d.move);
        resizableElement(d.element, resize, d.resize);
        d.element.addEventListener('mousedown', d.focus);

        d.addMethod = function(key, fn) {
            d[key] = fn.bind(d);
        };

        d.addTrigger = function(trigger) {
            var target;
            var event;

            if (trigger instanceof Element) {
                target = trigger;
                event = 'click';
            } else {
                target = trigger.element;
                event = trigger.event;
            }

            target.addEventListener(event, d.open.bind(d, target));
        };

        d.addAction = function(action) {
            var target = d.element.querySelector(action.selector);
            if (!target) {
                return;
            }

            if (typeof action.callback == 'string') {
                action.callback = d[action.callback];
            }

            action.callback = action.callback.bind(d, target);

            if (!action.event) {
                action.event = 'click';
            }

            target.addEventListener(action.event, action.callback);

            if (action.id) {
                d.actions[action.id] = target;
            }
        };

        d.addAccess = function(key, selector) {
            var target = d.element.querySelector(selector);
            if (!target) {
                return;
            }

            d.access[key] = target;
        };

        if (o.methods) {
            for (var key in o.methods) {
                d.addMethod(key, o.methods[key]);
            }
        }

        if (o.trigger) {
            d.addTrigger(o.trigger);
        }

        if (o.triggers) {
            var triggers = [].slice.call(o.triggers);
            triggers.forEach(d.addTrigger);
        }

        if (o.actions) {
            o.actions.forEach(d.addAction);
        }

        if (o.access) {
            for (var key in o.access) {
                d.addAccess(key, o.access[key]);
            }
        }

        dialogs.push(d);
    }

    document.addEventListener('keydown', function(e) {
        if (isEscapeKey(e)) {
            sortDialogs();
            if (dialogs.length) {
                dialogs[0].close();
            }
        }
    });

    window.Dialog = Dialog;
})();
