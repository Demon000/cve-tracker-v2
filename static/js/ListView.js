(function() {
    function stringToElement(s) {
        var div = document.createElement('div');
        div.innerHTML = s;
        return div.children[0];
    }

    function ListItem(lv, data, template, actions) {
        var li = this;

        li.remove = function() {
            var index = lv.list.indexOf(li);
            lv.list.splice(index, 1);

            lv.container.removeChild(li.element);

            lv.emitter.emit('remove', li);
            return li;
        };

        li.isEqualData = function(data) {
            return _.isEqual(li.data, data);
        };

        li.addAction = function(action) {
            var target = li.element.querySelector(action.selector);
            var callback = action.callback.bind(li, target);
            var event = action.event || 'click';

            target.addEventListener(event, callback);
        };

        li.render = function(data) {
            if (li.isEqualData(data)) {
                return;
            }

            var old = li.element;
            var s = template(data);

            li.data = data;
            li.element = stringToElement(s);

            actions.forEach(li.addAction);

            if (old) {
                lv.container.replaceChild(li.element, old);
            } else {
                lv.container.appendChild(li.element);
            }
        };

        li.render(data);
    }

    function ListView(o) {
        var lv = this;
        var template = _.template(o.template);
        var actions = o.actions || [];

        lv.emitter = new EventEmitter();

        lv.container = o.container;
        lv.list = [];

        if (!o.actions) {
            o.actions = [];
        }

        lv.set = function(data, index) {
            var item = lv.list[index];

            if (item) {
                item.render(data);
            } else {
                item = new ListItem(lv, data, template, actions);
            }

            lv.emitter.emit('set', item, index);
            return data;
        };

        lv.remove = function(item) {
            item.remove();
            return item;
        };

        lv.removeAt = function(index) {
            var item = lv.list[index];
            return lv.remove(item);
        };

        lv.add = function(data) {
            return lv.set(data, lv.list.length);
        };

        lv.refresh = function() {
            lv.list.forEach(lv.set);
        };

        lv.getData = function() {
            return lv.list;
        };

        lv.setData = function(data) {
            while(data.length < lv.list.length) {
                var item = lv.list.pop();
                item.remove();
            }
            data.forEach(lv.set);
        };

        if (o.data) {
            lv.setData(o.data);
        }
    }
    window.ListView = ListView;
})();