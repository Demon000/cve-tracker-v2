(function() {
    var statusChoicesElement = document.querySelector('#status-choices-menu');
    var statusChoicesMenu = new ContextMenu({
        element: statusChoicesElement,
        triggers: document.querySelectorAll('.cve .status'),
        event: 'click'
    });

    function handleChangeStatus(e) {
        var repo = pageData.repo;
        var branch = pageData.branchName;
        var trigger = statusChoicesMenu.trigger;
        var cve = trigger.getAttribute('data-name');
        var choice = e.currentTarget;
        var value = parseInt(choice.getAttribute('data-value'), 10);
        var description = choice.getAttribute('data-description');

        apiV1.branch(repo, branch)
        .changeStatuses([cve], value)
        .then(function(body) {
            trigger.setAttribute('data-value', value);
            trigger.innerHTML = description;
            statusChoicesMenu.close();
            percentageBar.set(body.percentage);
        })
        .catch(function(body) {
            informationView.show('error', body.message);
        });
    }

    var statusChoices = statusChoicesElement.children;
    _.each(statusChoices, function(statusChoice) {
        statusChoice.addEventListener('click', handleChangeStatus);
    });

    var patchsetDialog = new ExtendedDialog({
        element: document.querySelector('#patchset-dialog'),
        methods: {
            set: function(patchset) {
                var dialog = this;
                dialog.access.versions.value = patchset.versions.join(' ');
                dialog.access.patches.value = patchset.patches.join('\n');
            },
            get: function() {
                var dialog = this;
                var versions = splitString(dialog.access.versions.value);
                var patches = splitString(dialog.access.patches.value);
                return {
                    versions: versions,
                    patches: patches
                };
            },
            validate: function(button, callback) {
                var dialog = this;
                var patchset = dialog.get();

                button.disabled = true;

                apiV1.patchsets()
                .validate(patchset)
                .then(function(body) {
                    callback(patchset);
                    dialog.close();
                    button.disabled = false;
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                    button.disabled = false;
                });
            },
            openAdd: function(callback) {
                var dialog = this;
                dialog.element.setAttribute('data-mode', 'add');
                dialog.addCallback = callback;
                dialog.set({
                    versions: [],
                    patches: []
                });
                dialog.open();
            },
            add: function(button) {
                var dialog = this;
                dialog.validate(button, dialog.addCallback);
            },
            openEdit: function(patchset, callback) {
                var dialog = this;
                dialog.element.setAttribute('data-mode', 'edit');
                dialog.saveCallback = callback;
                dialog.set(patchset);
                dialog.open();
            },
            save: function() {
                var dialog = this;
                dialog.validate(button, dialog.saveCallback);
            },
        },
        access: {
            versions: '.versions',
            patches: '.patches'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .add',
            callback: 'add'
        }, {
            selector: '.actions .save',
            callback: 'save'
        }]
    });

    var addCvePatchsetsList = new ListView({
        container: document.querySelector('#add-cve-dialog .patchsets'),
        template: document.querySelector('#patchset-template').innerHTML,
        actions: [{
            selector: '.edit',
            callback: function() {
                var item = this;
                patchsetDialog.openEdit(item.data, function(newData) {
                    item.render(newData);
                });
            }
        }, {
            selector: '.delete',
            callback: function() {
                var item = this;
                item.remove();
            }
        }]
    });

    var addCvePatchsetDialogTrigger =
            document.querySelector('#add-cve-patchset-dialog-trigger');
    addCvePatchsetDialogTrigger.addEventListener('click', function() {
        patchsetDialog.openAdd(addCvePatchsetsList.add);
    });

    var addCveDialog = new ExtendedDialog({
        element: document.querySelector('#add-cve-dialog'),
        methods: {
            get: function() {
                var dialog = this;
                var name = dialog.access.name.value;
                var score = parseInt(dialog.access.score.value);
                var notes = dialog.access.notes.value;
                var tags = splitString(dialog.access.tags.value);
                var patchsets = addCvePatchsetsList.getData();

                return {
                    name: name,
                    score: score,
                    notes: notes,
                    tags: tags,
                    patchsets: patchsets
                };
            },
            set: function(cve) {
                var dialog = this;
                dialog.access.titleName.innerHTML = cve.name;
                dialog.access.score.value = cve.score;
                dialog.access.name.value = cve.name;
                dialog.access.notes.value = cve.notes;
                dialog.access.tags.value = cve.tags.join(' ');
                addCvePatchsetsList.setData(cve.patchsets);
            },
            add: function(button) {
                var dialog = this;

                button.disabled = true;

                var cve = dialog.get();
                delete cve.score;

                apiV1.cves()
                .add(cve)
                .then(function(body) {
                    dialog.close();
                    location.reload();
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                    button.disabled = false;
                });
            },
            openAdd: function() {
                var dialog = this;
                dialog.element.setAttribute('data-mode', 'add');
                dialog.set({
                    name: '',
                    notes: '',
                    tags: [],
                    patchsets: []
                });
                dialog.open();
            },
            save: function(button) {
                var dialog = this;

                button.disabled = true;

                var cve = dialog.get();

                apiV1.cve(cve.name)
                .edit(cve)
                .then(function(body) {
                    informationView.show('success', body.message);
                    button.disabled = false;
                    dialog.close();

                    if (cveInfoDialog.isOpen()) {
                        cveInfoDialog.open(cve.name);
                    }
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                    button.disabled = false;
                });
            },
            openEdit: function(name) {
                var dialog = this;
                dialog.element.setAttribute('data-mode', 'edit');
                apiV1.cve(name)
                .get()
                .then(function(body) {
                    dialog.set(body.data);
                    dialog.open();
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                });
            }
        },
        access: {
            titleName: '.title-name',
            name: '.name',
            score: '.score',
            notes: '.notes',
            tags: '.tags'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .add',
            callback: 'add'
        }, {
            selector: '.actions .save',
            callback: 'save'
        }]
    });

    var addCveDialogTrigger = document.querySelector('#add-cve-dialog-trigger');
    addCveDialogTrigger.addEventListener('click', addCveDialog.openAdd);

    var importStatusesDialog = new ExtendedDialog({
        element: document.querySelector('#import-statuses-dialog'),
        trigger: document.querySelector('#import-statuses-dialog-trigger'),
        methods: {
            import: function(button) {
                var dialog = this;
                var repo = pageData.repo;
                var branch = pageData.branchName;
                var fromRepo = dialog.access.repo.value;
                var fromBranch = dialog.access.branch.value;
                var override = dialog.access.override.checked;

                button.disabled = true;

                apiV1.branch(repo, branch)
                .importStatuses(fromRepo, fromBranch, override)
                .then(function(body) {
                    dialog.close();
                    location.reload();
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                    button.disabled = false;
                });
            }
        },
        access: {
            repo: '.repo',
            branch: '.branch',
            override: '#override'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .import',
            callback: 'import'
        }]
    });

    var editKernelDialog = new ExtendedDialog({
        element: document.querySelector('#edit-kernel-dialog'),
        trigger: document.querySelector('#edit-kernel-dialog-trigger'),
        methods: {
            save: function(button) {
                var dialog = this;
                var repo = pageData.repo;
                var deprecated = dialog.access.deprecated.checked;
                var defaultBranch = dialog.access.defaultBranch.value;
                var branches =
                    splitString(dialog.access.branches.value)
                    .map(function(pair) {
                        var values = pair.split('=');
                        return {
                            name: values[0],
                            version: values[1]
                        };
                    });

                button.disabled = true;

                apiV1.kernel(repo)
                .edit({
                    'deprecated': deprecated,
                    'branches': branches,
                    'default_branch': defaultBranch
                })
                .then(function(body) {
                    dialog.close();
                    location.reload();
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                    button.disabled = false;
                });
            },
            set: function(kernel) {
                var dialog = this;
                dialog.access.deprecated.checked = kernel.deprecated;
                dialog.access.defaultBranch.value = kernel.default_branch;
                dialog.access.branches.value =
                    kernel.branches
                    .map(function(branch) {
                        return branch.name + '=' + branch.version;
                    }).join(' ');
            },
            open: function() {
                var dialog = this;
                var repo = pageData.repo;
                apiV1.kernel(repo)
                .get()
                .then(function(body) {
                    dialog.set(body.data);
                    dialog._open();
                })
                .catch(function(body) {
                    informationView.show('error', body.message);
                });
            }
        },
        access: {
            deprecated: '#deprecated',
            branches: '.branches',
            defaultBranch: '.default-branch'
        },
        actions: [{
            selector: '.actions .cancel',
            callback: 'close'
        }, {
            selector: '.actions .save',
            callback: 'save'
        }]
    });
    window.addCveDialog = addCveDialog;

    var cveElements = document.querySelectorAll('#cves-container .cve');
    var filterElements = _.map(cveElements, function(cveElement) {
        return {
            element: cveElement,
            tags: splitString(cveElement.getAttribute('data-tags'))
        };
    });
    var tagsFilterer = new Filterer({
        elements: filterElements,
        showAllIfNone: true
    });

    var tagElements = document.querySelectorAll('#tags-container .tag');
    var tagOptions = {};
    _.each(tagElements, function(tagElement) {
        var option = tagElement.getAttribute('data-value');
        tagOptions[option] = tagElement;
    });
    var tagsSelector = new Selector({
        options: tagOptions,
        multiple: true
    });
    tagsSelector.emitter.on('activesChange', function(activeTags) {
        tagsFilterer.setActivesFor(activeTags);
        localStorage.setItem('active-tags', JSON.stringify(activeTags));
    });
    var activeTagsString = localStorage.getItem('active-tags');
    if (!activeTagsString) {
        activeTagsString = '[]';
    }
    var activeTags = JSON.parse(activeTagsString);
    tagsSelector.setActives(activeTags, true);

    var resetTagsTrigger = document.querySelector('#reset-tags-trigger');
    resetTagsTrigger.addEventListener('click', function() {
        tagsSelector.setActives(tagsSelector.getOptionsValue(), false);
    });
})();
