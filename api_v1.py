import traceback

from flask import Blueprint, jsonify, request
from classes import *
from utils import *

api_v1 = Blueprint('api_v1', __name__, url_prefix='/api/v1')

@api_v1.route('/status_descriptions', methods=['GET'])
def get_statuses():
    return json_response_success({
        'message': 'Status descriptions have been successfully retrieved.',
        'data': StatusDescriptions
    }, 200)

@api_v1.route('/kernel_versions', methods=['GET'])
def get_kernel_versions():
    return json_response_success({
        'message': 'Kernel versions have been successfully retrieved.',
        'data': KernelVersions
    }, 200)

@api_v1.route('/branch_names', methods=['GET'])
def get_branch_names():
    return json_response_success({
        'message': 'Branch names have been successfully retrieved.',
        'data': BranchNames
    }, 200)

@api_v1.route('/kernels', methods=['GET'])
def get_kernels():
    deprecated = request.args.get('deprecated')
    deprecated_values = map_deprecated_values(deprecated)

    kernels = Kernel.objects(deprecated__in=deprecated_values) \
            .order_by('repo')

    cves_count = Cve.objects.count()
    for kernel in kernels:
        kernel.set_percentages(cves_count)

    return json_response_success({
        'message': 'Kernels have been successfully retrieved.',
        'count': kernels.count(),
        'data': kernels
    }, 200)

@api_v1.route('/kernels/<repo>', methods=['GET'])
def get_kernel(repo):
    kernel = Kernel.objects.with_id(repo)
    if not kernel:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    cves_count = Cve.objects.count()
    kernel.set_percentages(cves_count)

    return json_response_success({
        'message': 'Kernels have been successfully retrieved.',
        'data': kernel
    }, 200)

@api_v1.route('/kernels', methods=['POST'])
def post_kernels():
    request_data = request.get_json()

    if type(request_data) is not dict:
        return json_response_error({
            'message': 'Request body is not an object.'
        }, 400)

    try:
        kernel = Kernel.create(request_data).save()
    except ValueError as e:
        return json_response_error({
            'message': str(e)
        }, 400)

    return json_response_success({
        'message': 'Kernel has been successfully added.',
        'data': kernel
    }, 200)

@api_v1.route('/kernels/<repo>', methods=['PATCH'])
def patch_kernel(repo):
    request_data = request.get_json()

    if type(request_data) is not dict:
        return json_response_error({
            'message': 'Request body is not an object.'
        }, 400)

    kernel = Kernel.objects.with_id(repo)
    if not kernel:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    try:
        kernel.patch(request_data).save()
    except ValueError as e:
        return json_response_error({
            'message': str(e)
        }, 400)

    return json_response_success({
        'message': 'Kernel has been successfully updated.',
        'data': kernel
    }, 200)

@api_v1.route('/kernels/<repo>/<branch_name>/statuses',
        methods=['GET'])
def get_kernel_branch_statuses(repo, branch_name):
    kernel = Kernel.objects.with_id(repo)
    if not kernel:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    if not kernel.branch_with_name(branch_name):
        return json_response_error({
            'message': 'Branch does not exist.'
        }, 400)

    statuses = Status.objects(kernel=kernel, branch=branch_name) \
            .no_dereference().exclude('id')

    return json_response_success({
        'message': 'Statuses have been successfully retrieved.',
        'data': statuses
    }, 200)

@api_v1.route('/kernels/<repo>/<branch_name>/import_statuses',
        methods=['POST'])
def post_kernel_branch_import_statuses(repo, branch_name):
    request_data = request.get_json()

    print(repo, branch_name, request_data)

    if type(request_data) is not dict:
        return json_response_error({
            'message': 'Request body is not an object.'
        }, 400)

    to_kernel = Kernel.objects.with_id(repo)
    if not to_kernel:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    to_branch = to_kernel.branch_with_name(branch_name)
    if not to_branch:
        return json_response_error({
            'message': 'Branch does not exist.'
        }, 400)

    from_repo = request_data.get('repo')
    from_kernel = Kernel.objects.with_id(from_repo)
    if not from_kernel:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    from_branch_name = request_data.get('branch')
    from_branch = from_kernel.branch_with_name(from_branch_name)
    if not from_branch:
        return json_response_error({
            'message': 'Branch does not exist.'
        }, 400)

    override = request_data.get('override', False)

    to_statuses = to_branch.get_statuses(True)
    from_statuses = from_branch.get_statuses(True)
    statuses = []

    for cve in from_statuses:
        if override or to_statuses[cve] == StatusValues['unpatched']:
            status = to_branch.change_status(cve, from_statuses[cve])
            if status:
                statuses.append(status)

    for status in statuses:
        status.save()

    to_kernel.save()

    return json_response_success({
        'message': 'Stauses have been successfully imported.'
    }, 200)

@api_v1.route('/kernels/<repo>/<branch_name>/statuses',
        methods=['POST'])
def post_kernel_branch_statuses(repo, branch_name):
    request_data = request.get_json()

    if type(request_data) is not dict:
        return json_response_error({
            'message': 'Request body is not an object.'
        }, 400)

    kernel = Kernel.objects.with_id(repo)
    if not kernel:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    branch = kernel.branch_with_name(branch_name)
    if not branch:
        return json_response_error({
            'message': 'Branch does not exist.'
        }, 400)

    cve_names = request_data.get('cves')
    if not cve_names:
        return json_response_error({
            'message': 'CVEs cannot be empty.'
        }, 400)

    value = request_data.get('value')
    if not Status.is_valid_value(value):
        return json_response_error({
            'message': 'Status value is invalid.'
        }, 400)

    try:
        statuses = branch.change_statuses(cve_names, value)
    except ValueError as e:
        return json_response_error({
            'message': str(e)
        }, 400)

    for status in statuses:
        status.save()

    kernel.save()

    cves_count = Cve.objects.count()
    branch.set_percentage(cves_count)

    return json_response_success({
        'message': 'Stauses have been successfully updated.',
        'percentage': branch.percentage
    }, 200)

@api_v1.route('/kernels/<repo>', methods=['DELETE'])
def delete_kernel(repo):
    kernel = Kernel.objects.with_id(repo)
    if not kernel:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    kernel.delete()

    return json_response_success({
        'message': 'Kernel has been successfully deleted.',
        'data': kernel
    }, 200)

@api_v1.route('/cves', methods=['GET'])
def get_cves():
    cves = Cve.objects()

    return json_response_success({
        'message': 'CVEs have been successfully retrieved.',
        'count': cves.count(),
        'data': cves
    }, 200)

@api_v1.route('/cves', methods=['POST'])
def post_cves():
    request_data = request.get_json()

    if type(request_data) is not dict:
        return json_response_error({
            'message': 'Request body is not an object.'
        }, 400)

    try:
        cve = Cve.create(request_data).save()
    except ValueError as e:
        return json_response_error({
            'message': str(e)
        }, 400)

    return json_response_success({
        'message': 'CVE has been successfully added.',
        'data': cve
    }, 200)

@api_v1.route('/cves/<name>', methods=['GET'])
def get_cve(name):
    cve = Cve.objects.with_id(name)
    if not cve:
        return json_response_error({
            'message': 'CVE does not exist.'
        }, 400)

    return json_response_success({
        'message': 'CVE has been successfully retrieved.',
        'data': cve
    }, 200)

@api_v1.route('/cves/<name>', methods=['PATCH'])
def patch_cve(name):
    request_data = request.get_json()

    if type(request_data) is not dict:
        return json_response_error({
            'message': 'Request body is not an object.'
        }, 400)

    cve = Cve.objects.with_id(name)
    if not cve:
        return json_response_error({
            'message': 'CVE does not exist.'
        }, 400)

    try:
        cve.patch(request_data).save()
    except ValueError as e:
        return json_response_error({
            'message': str(e)
        }, 400)

    return json_response_success({
        'message': 'CVE has been successfully updated.',
        'data': cve
    }, 200)

@api_v1.route('/cves/<name>/statuses', methods=['GET'])
def get_cve_statuses(name):
    cve = Cve.objects.with_id(name)
    if not cve:
        return json_response_error({
            'message': 'CVE does not exist.'
        }, 400)

    statuses = Status.objects(cve=cve)

    return json_response_success({
        'message': 'Statuses have been successfully retrieved.',
        'data': statuses
    }, 200)

@api_v1.route('/cves/<name>', methods=['DELETE'])
def delete_cve(name):
    cve = Cve.objects.with_id(name)
    if not cve:
        return json_response_error({
            'message': 'CVE does not exist.'
        }, 400)

    cve.delete()

    return json_response_success({
        'message': 'CVE has been successfully deleted.',
        'data': cve
    }, 200)

@api_v1.errorhandler(Exception)
def error_handler(e):
    message = traceback.format_exc()
    return json_response_error({
        'message': message
    }, 500)
