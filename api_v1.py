from flask import Blueprint, jsonify, request
from pymongo.errors import DuplicateKeyError
from classes import *
from utils import *

api_v1 = Blueprint('api_v1', __name__, url_prefix='/api/v1')

@api_v1.route('/statuses', methods=['GET'])
def get_statuses():
    return json_response_success({
        'message': 'Statuses have been successfully retrieved.',
        'data': StatusDescriptions
    }, 200)

@api_v1.route('/kernel_versions', methods=['GET'])
def get_kernel_versions():
    return json_response_success({
        'message': 'Kernel versions have been successfully retrieved.',
        'data': KernelVersions
    }, 200)

@api_v1.route('/branch_names', methods=['GET'])
def get_branch_names():
    return json_response_success({
        'message': 'Branch names have been successfully retrieved.',
        'data': BranchNames
    }, 200)

@api_v1.route('/kernels', methods=['GET'])
def get_kernels():
    deprecated = request.args.get('deprecated')
    if not deprecated in DeprecatedMap:
        deprecated = -1

    deprecated_values = DeprecatedMap[deprecated]

    kernels = Kernel.objects(deprecated__in=deprecated_values)

    return json_response_success({
        'message': 'Kernels have been successfully retrieved.',
        'data': kernels
    }, 200)

@api_v1.route('/kernels', methods=['POST'])
def post_kernels():
    request_data = request.get_json()

    if not request_data:
        return json_response_error({
            'message': 'Request body cannot be empty.'
        }, 400)

    repo = request_data.get('repo')
    try:
        vendor, device = repo_to_vendor_device(repo)
    except ValueError as e:
        return json_response_error({
            'message': str(e)
        }, 400)

    deprecated = request_data.get('deprecated', False)

    try:
        kernel = Kernel(repo=repo, vendor=vendor, device=device,
                deprecated=deprecated).save()
    except NotUniqueError:
        return json_response_error({
            'message': 'Kernel already exists.'
        }, 400)

    return json_response_success({
        'message': 'Kernel has been successfully added.',
        'data': kernel
    }, 200)

@api_v1.route('/kernels/<repo>', methods=['PUT'])
def put_kernel(repo):
    request_data = request.get_json()

    if not request_data:
        return json_response_error({
            'message': 'Request body cannot be empty.'
        }, 400)

    try:
        kernel = Kernel.objects.get(repo=repo)
    except DoesNotExist:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    deprecated = request_data.get('deprecated')
    if deprecated != None:
        kernel.modify(deprecated=deprecated)

    return json_response_success({
        'message': 'Kernel has been successfully updated.',
        'data': kernel
    }, 200)

@api_v1.route('/kernels/<repo>', methods=['DELETE'])
def delete_kernel(repo):
    try:
        kernel = Kernel.objects.get(repo=repo)
    except DoesNotExist:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    kernel.delete()

    return json_response_success({
        'message': 'Kernel has been successfully deleted.'
    }, 200)

@api_v1.route('/kernels/<repo>/branches', methods=['PUT'])
def put_kernel_branches(repo):
    request_data = request.get_json()

    if not request_data:
        return json_response_error({
            'message': 'Request body cannot be empty.'
        }, 400)

    try:
        kernel = Kernel.objects.get(repo=repo)
    except DoesNotExist:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    branches_data = request_data
    branches = []
    for branch_data in branches_data:
        name = branch_data.get('name')
        if not name in BranchNames:
            return json_response_error({
                'message': 'Branch name is invalid.'
            }, 400)

        version = branch_data.get('version')
        if not version in KernelVersions:
            return json_response_error({
                'message': 'Branch version is invalid.'
            }, 400)

        branch = Branch(name=name, version=version)
        branches.append(branch)

    kernel.branches = branches
    kernel.save()

    return json_response_success({
        'message': 'Branches have been successfully updated.',
        'data': kernel
    }, 200)

@api_v1.route('/cves', methods=['GET'])
def get_cves():
    cves = Cve.objects()

    return json_response_success({
        'message': 'CVEs have been successfully retrieved.',
        'data': cves
    }, 200)

@api_v1.route('/cves', methods=['POST'])
def post_cves():
    request_data = request.get_json()

    if not request_data:
        return json_response_error({
            'message': 'Request body cannot be empty.'
        }, 400)

    name = request_data.get('name')
    if not name:
        return json_response_error({
            'message': 'CVE name cannot be empty.'
        }, 400)

    notes = request_data.get('notes', '')

    score = request_data.get('score')
    if score < 0 or score > 10:
        return json_response_error({
            'message': 'CVE score must be between 0 and 10.'
        }, 400)

    tags = request_data.get('tags', [])

    try:
        cve = Cve(name=name, notes=notes, score=score, tags=tags)
    except NotUniqueError:
        return json_response_error({
            'message': 'CVE already exists.'
        }, 400)

    return json_response_success({
        'message': 'CVE has been successfully added.',
        'data': cve
    }, 200)

@api_v1.route('/cves/<name>/patchsets', methods=['PUT'])
def put_cve_patchsets(name):
    request_data = request.get_json()

    if not request_data:
        return json_response_error({
            'message': 'Request body cannot be empty.'
        }, 400)

    try:
        cve = Cve.objects.get(name=name)
    except DoesNotExist:
        return json_response_error({
            'message': 'CVE does not exist.'
        }, 400)

    patchsets_data = request_data
    patchsets = []
    for patchset_data in patchsets_data:
        versions = patchset_data.get('versions')
        if not versions:
            return json_response_error({
                'message': 'Patchset versions cannot be empty.'
            }, 400)
        for version in versions:
            if not versions in KernelVersions:
                return json_response_error({
                    'message': 'Patchset versions are invalid.'
                }, 400)

        patches = patchset_data.get('patches')
        if not patches:
            return json_response_error({
                'message': 'Patchset patches cannot be empty.'
            }, 400)
        for patch in patches:
            if not is_valid_url(patch):
                return json_response_error({
                    'message': 'Patchset patches are invalid.'
                }, 400)

        patchset = Patchset(version=version, patches=patches)
        patchsets.append(patchset)

    cve.patchsets = patchsets
    cve.save()

    return json_response_success({
        'message': 'Patchsets have been successfully updated.',
        'data': cve
    }, 200)

@api_v1.route('/cves/<name>', methods=['DELETE'])
def delete_cve(name):
    try:
        cve = Cve.objects.get(name=name)
    except DoesNotExist:
        return json_response_error({
            'message': 'CVE does not exist.'
        }, 400)

    cve.delete()

    return json_response_success({
        'message': 'CVE has been successfully deleted.'
    }, 200)
