from flask import Blueprint, jsonify, request
from pymongo.errors import DuplicateKeyError
from classes import *
from utils import *

api_v1 = Blueprint('api_v1', __name__, url_prefix='/api/v1')

@api_v1.route('/statuses', methods=['GET'])
def get_statuses():
    return json_response_success({
        'message': 'Statuses have been successfully retrieved.',
        'data': StatusDescriptions
    }, 200)

@api_v1.route('/kernel_versions', methods=['GET'])
def get_kernel_versions():
    return json_response_success({
        'message': 'Kernel versions have been successfully retrieved.',
        'data': KernelVersions
    }, 200)

@api_v1.route('/kernels', methods=['GET'])
def get_kernels():
    kernels = Kernel.objects()

    return json_response_success({
        'message': 'Kernels have been successfully retrieved.',
        'data': kernels
    }, 200)

@api_v1.route('/kernels', methods=['POST'])
def post_kernels():
    request_data = request.get_json()

    if not request_data:
        return json_response_error({
            'message': 'Request body cannot be empty.'
        }, 400)

    repo = request_data.get('repo')
    try:
        vendor, device = repo_to_vendor_device(repo)
    except ValueError as e:
        return json_response_error({
            'message': str(e)
        }, 400)

    deprecated = request_data.get('deprecated', False)

    try:
        kernel = Kernel(repo=repo, vendor=vendor, device=device,
                deprecated=deprecated).save()
    except NotUniqueError:
        return json_response_error({
            'message': 'Kernel already exists.'
        }, 400)

    return json_response_success({
        'message': 'Kernel has been successfully added.',
        'data': kernel
    }, 200)

@api_v1.route('/kernels/<repo>', methods=['DELETE'])
def delete_kernel(repo):
    try:
        kernel = Kernel.objects.get(repo=repo)
    except DoesNotExist:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    kernel.delete()

    return json_response_success({
        'message': 'Kernel has been successfully deleted.'
    }, 200)

@api_v1.route('/kernels/<repo>', methods=['PUT'])
def put_kernel(repo):
    request_data = request.get_json()

    if not request_data:
        return json_response_error({
            'message': 'Request body cannot be empty.'
        }, 400)

    try:
        kernel = Kernel.objects.get(repo=repo)
    except DoesNotExist:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    deprecated = request_data.get('deprecated')
    if deprecated != None:
        kernel.modify(deprecated=deprecated)

    return json_response_success({
        'message': 'Kernel has been successfully updated.',
        'data': kernel
    }, 200)

@api_v1.route('/kernels/<repo>/branches', methods=['POST'])
def post_kernel_branches(repo):
    request_data = request.get_json()

    if not request_data:
        return json_response_error({
            'message': 'Request body cannot be empty.'
        }, 400)

    try:
        kernel = Kernel.objects.get(repo=repo)
    except DoesNotExist:
        return json_response_error({
            'message': 'Kernel does not exist.'
        }, 400)

    name = request_data.get('name')
    if not name in BranchNames:
        return json_response_error({
            'message': 'Branch name is invalid.'
        }, 400)
    for branch in kernel.branches:
        if branch.name == name:
            return json_response_error({
                'message': 'Branch already exists.'
            }, 400)

    version = request_data.get('version')
    if not version in KernelVersions:
        return json_response_error({
            'message': 'Branch version is invalid.'
        }, 400)

    branch = Branch(name=name, version=version)
    kernel.branches.append(branch)
    kernel.save()

    return json_response_success({
        'message': 'Branch has been successfully added.',
        'data': kernel
    }, 200)
